{"version":3,"file":"js/113-f99271131a6ece9cd1bc.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;AAEA,SAASG,OAAT,OAOG;AAAA,MAPc;AACbC,IAAAA,KADa;AAEbC,IAAAA,IAFa;AAGbC,IAAAA,KAHa;AAIbC,IAAAA,aAJa;AAKbC,IAAAA,WALa;AAMbC,IAAAA;AANa,GAOd;AACC,QAAMC,IAAI,GAAGL,IAAI,CAACM,OAAL,CACT,IAAIC,MAAJ,CAAWN,KAAX,EAAkB,IAAlB,CADS,EAERO,KAAD,wCAAsCA,KAAtC,YAFS,CAAb;AAKA,sBACI;AACI,OAAG,EAAEJ,SADT;AAEI,QAAI,EAAEF,aAAa,KAAKH,KAAlB,IAA2B,UAFrC;AAGI,4BAAeC,IAAf,CAHJ;AAII,MAAE,YAAKD,KAAL,CAJN;AAKI,OAAG,oBAAaA,KAAb,CALP;AAMI,qBAAeG,aAAa,KAAKH,KANrC;AAOI,aAAS,EAAC,oDAPd;AAQI,2BAAuB,EAAE;AAAEU,MAAAA,MAAM,EAAEJ;AAAV,KAR7B;AASI,WAAO,EAAGK,CAAD,IAAOP,WAAW,CAACO,CAAD,EAAIV,IAAJ;AAT/B,IADJ;AAaH;;AAEc,SAASW,OAAT,CAAiBC,KAAjB,EAAwB;AACnC,QAAM;AAAEC,IAAAA,EAAF;AAAMC,IAAAA,KAAN;AAAaC,IAAAA,SAAb;AAAwBC,IAAAA,UAAxB;AAAoCZ,IAAAA,SAApC;AAA+CD,IAAAA;AAA/C,MAA+DS,KAArE;AACA,QAAM;AAAEK,IAAAA,OAAF;AAAWf,IAAAA,aAAX;AAA0BD,IAAAA;AAA1B,MAAoCJ,yDAAQ,EAAlD;;AAEA,MAAI,CAACoB,OAAO,CAACD,UAAD,CAAR,IAAwBC,OAAO,CAACD,UAAD,CAAP,CAAoBE,MAApB,KAA+B,CAA3D,EAA8D;AAC1D,WAAO,IAAP;AACH;;AAED,sBACI;AACI,MAAE,uBAAgBL,EAAhB,CADN;AAEI,aAAS,EAAE,oCAAoCE,SAApC,EAA+CI,IAA/C,CAAoD,GAApD,CAFf;AAGI,QAAI,EAAC;AAHT,kBAKI;AAAG,aAAS,EAAC;AAAb,KAAsDL,KAAtD,CALJ,eAMI;AAAI,QAAI,EAAC;AAAT,KACKG,OAAO,CAACD,UAAD,CAAP,IACGC,OAAO,CAACD,UAAD,CAAP,CAAoBI,GAApB,CAAwB,CAACpB,IAAD,EAAOD,KAAP,KACpBD,OAAO,CAAC;AACJC,IAAAA,KADI;AAEJC,IAAAA,IAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA,aAJI;AAKJC,IAAAA,WALI;AAMJC,IAAAA;AANI,GAAD,CADX,CAFR,CANJ,CADJ;AAsBH;AAED,MAAM;AAAEiB,EAAAA,MAAF;AAAUC,EAAAA,MAAV;AAAkBC,EAAAA;AAAlB,IAA2B3B,mDAAjC;AAEAe,OAAO,CAACa,SAAR,GAAoB;AAChBX,EAAAA,EAAE,EAAEQ,MAAM,CAACI,UADK;AAEhBX,EAAAA,KAAK,EAAEO,MAFS;AAGhBN,EAAAA,SAAS,EAAEM,MAHK;AAIhBL,EAAAA,UAAU,EAAEM,MAAM,CAACG,UAJH;AAKhBrB,EAAAA,SAAS,EAAEmB,IAAI,CAACE,UALA;AAMhBtB,EAAAA,WAAW,EAAEoB;AANG,CAApB;AASAZ,OAAO,CAACe,YAAR,GAAuB;AACnBZ,EAAAA,KAAK,IADc;AAEnBC,EAAAA,SAAS,IAFU;AAGnBZ,EAAAA,WAAW,EAAE,MAAM,CAAE;AAHF,CAAvB","sources":["webpack://Plug-and-Play-Template/./src/modules/autocomplete-concierge/jsx/templates/organic.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useStore } from '../store';\n\nfunction partial({\n    index,\n    data,\n    query,\n    selectedIndex,\n    handleClick,\n    childRefs,\n}) {\n    const item = data.replace(\n        new RegExp(query, 'gi'),\n        (match) => `<span class=\"highlight\">${match}</span>`\n    );\n\n    return (\n        <li\n            ref={childRefs}\n            role={selectedIndex === index && 'gridcell'}\n            aria-label={`${data}`}\n            id={`${index}`}\n            key={`organic-${index}`}\n            aria-selected={selectedIndex === index}\n            className=\"autocomplete-concierge__search-result-item organic\"\n            dangerouslySetInnerHTML={{ __html: item }}\n            onClick={(e) => handleClick(e, data)}\n        />\n    );\n}\n\nexport default function Organic(props) {\n    const { id, label, className, templateId, childRefs, handleClick } = props;\n    const { results, selectedIndex, query } = useStore();\n\n    if (!results[templateId] || results[templateId].length === 0) {\n        return null;\n    }\n\n    return (\n        <div\n            id={`result-row-${id}`}\n            className={[`autocomplete-concierge__section`, className].join(' ')}\n            role=\"row\"\n        >\n            <p className=\"autocomplete-concierge__section-title\">{label}</p>\n            <ul role=\"rowgroup\">\n                {results[templateId] &&\n                    results[templateId].map((data, index) =>\n                        partial({\n                            index,\n                            data,\n                            query,\n                            selectedIndex,\n                            handleClick,\n                            childRefs,\n                        })\n                    )}\n            </ul>\n        </div>\n    );\n}\n\nconst { string, number, func } = PropTypes;\n\nOrganic.propTypes = {\n    id: string.isRequired,\n    label: string,\n    className: string,\n    templateId: number.isRequired,\n    childRefs: func.isRequired,\n    handleClick: func,\n};\n\nOrganic.defaultProps = {\n    label: ``,\n    className: ``,\n    handleClick: () => {},\n};\n"],"names":["React","PropTypes","useStore","partial","index","data","query","selectedIndex","handleClick","childRefs","item","replace","RegExp","match","__html","e","Organic","props","id","label","className","templateId","results","length","join","map","string","number","func","propTypes","isRequired","defaultProps"],"sourceRoot":""}